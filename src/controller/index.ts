//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
export class ArticleClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5064";
    }

    /**
     * 根据用户id获取文档(id通过解析Jwt获得)
     * @param page 分页数据
     */
    getArticle(page: PageDataOfArticleDTO): Promise<ResCodeOfPageDataOfArticleDTO> {
        let url_ = this.baseUrl + "/api/Article";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(page);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetArticle(_response);
        });
    }

    protected processGetArticle(response: Response): Promise<ResCodeOfPageDataOfArticleDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfPageDataOfArticleDTO;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfPageDataOfArticleDTO>(null as any);
    }

    /**
     * 添加文章
     * @param article 文章内容
     */
    addArticle(article: ArticleDTO): Promise<number> {
        let url_ = this.baseUrl + "/api/Article";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(article);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddArticle(_response);
        });
    }

    protected processAddArticle(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as number;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(null as any);
    }

    /**
     * 删除文章
     */
    delect(id: number): Promise<ResCodeOfBoolean> {
        let url_ = this.baseUrl + "/api/Article/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelect(_response);
        });
    }

    protected processDelect(response: Response): Promise<ResCodeOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfBoolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfBoolean>(null as any);
    }

    /**
     * 根据文章Id获得内容
     */
    getById(id: number): Promise<ResCodeOfArticleDTO> {
        let url_ = this.baseUrl + "/api/Article/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetById(_response);
        });
    }

    protected processGetById(response: Response): Promise<ResCodeOfArticleDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfArticleDTO;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfArticleDTO>(null as any);
    }

    /**
     * 修改文章
     */
    changeArticle(article: ArticleDTO): Promise<ResCodeOfArticleDTO> {
        let url_ = this.baseUrl + "/api/Article/change";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(article);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChangeArticle(_response);
        });
    }

    protected processChangeArticle(response: Response): Promise<ResCodeOfArticleDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfArticleDTO;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfArticleDTO>(null as any);
    }

    /**
     * 文章点赞(取消点赞)
     */
    likeArticle(articleid: number): Promise<ResCodeOfString> {
        let url_ = this.baseUrl + "/api/Article/{articleid}";
        if (articleid === undefined || articleid === null)
            throw new Error("The parameter 'articleid' must be defined.");
        url_ = url_.replace("{articleid}", encodeURIComponent("" + articleid));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PATCH",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLikeArticle(_response);
        });
    }

    protected processLikeArticle(response: Response): Promise<ResCodeOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfString;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfString>(null as any);
    }

    /**
     * 简单搜索文章（标题）
     */
    searchArticle(search: PageDataOfString): Promise<ResCodeOfPageDataOfArticleDTO> {
        let url_ = this.baseUrl + "/api/Article/simple";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(search);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearchArticle(_response);
        });
    }

    protected processSearchArticle(response: Response): Promise<ResCodeOfPageDataOfArticleDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfPageDataOfArticleDTO;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfPageDataOfArticleDTO>(null as any);
    }

    /**
     * 复杂查询（标签）
     */
    searchByTags(search: PageDataOfString): Promise<ArticleDTO[]> {
        let url_ = this.baseUrl + "/api/Article/complicated";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(search);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearchByTags(_response);
        });
    }

    protected processSearchByTags(response: Response): Promise<ArticleDTO[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ArticleDTO[];
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ArticleDTO[]>(null as any);
    }

    /**
     * 业务无关接口
     * @param name (optional) 
     */
    getfile(name: string | null | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Article/Service?";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetfile(_response);
        });
    }

    protected processGetfile(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }
}

export class ChatClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5064";
    }

    /**
     * 获得与某人的聊天记录
     */
    getChat(userId: number, pageindex: number, pagesize: number): Promise<ResCodeOfPageDataOfChatInfo> {
        let url_ = this.baseUrl + "/api/Chat/{userId}/{pageindex}/{pagesize}";
        if (userId === undefined || userId === null)
            throw new Error("The parameter 'userId' must be defined.");
        url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
        if (pageindex === undefined || pageindex === null)
            throw new Error("The parameter 'pageindex' must be defined.");
        url_ = url_.replace("{pageindex}", encodeURIComponent("" + pageindex));
        if (pagesize === undefined || pagesize === null)
            throw new Error("The parameter 'pagesize' must be defined.");
        url_ = url_.replace("{pagesize}", encodeURIComponent("" + pagesize));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetChat(_response);
        });
    }

    protected processGetChat(response: Response): Promise<ResCodeOfPageDataOfChatInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfPageDataOfChatInfo;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfPageDataOfChatInfo>(null as any);
    }

    /**
     * 发送消息
     */
    sendMessage(receiveId: number, message: string): Promise<ResCodeOfBoolean> {
        let url_ = this.baseUrl + "/api/Chat/{ReceiveId}";
        if (receiveId === undefined || receiveId === null)
            throw new Error("The parameter 'receiveId' must be defined.");
        url_ = url_.replace("{ReceiveId}", encodeURIComponent("" + receiveId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(message);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSendMessage(_response);
        });
    }

    protected processSendMessage(response: Response): Promise<ResCodeOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfBoolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfBoolean>(null as any);
    }

    recevieMessage(send: number): Promise<void> {
        let url_ = this.baseUrl + "/api/Chat/{send}";
        if (send === undefined || send === null)
            throw new Error("The parameter 'send' must be defined.");
        url_ = url_.replace("{send}", encodeURIComponent("" + send));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PATCH",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRecevieMessage(_response);
        });
    }

    protected processRecevieMessage(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class CollectionAndLikeClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5064";
    }

    /**
     * 收藏文章
     */
    addCollect(articleId: number): Promise<ResCodeOfString> {
        let url_ = this.baseUrl + "/api/CollectionAndLike/collect/{articleId}";
        if (articleId === undefined || articleId === null)
            throw new Error("The parameter 'articleId' must be defined.");
        url_ = url_.replace("{articleId}", encodeURIComponent("" + articleId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddCollect(_response);
        });
    }

    protected processAddCollect(response: Response): Promise<ResCodeOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfString;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfString>(null as any);
    }

    /**
     * 取消收藏
     */
    voidArt(articleId: number): Promise<ResCodeOfString> {
        let url_ = this.baseUrl + "/api/CollectionAndLike/collect/void/{articleId}";
        if (articleId === undefined || articleId === null)
            throw new Error("The parameter 'articleId' must be defined.");
        url_ = url_.replace("{articleId}", encodeURIComponent("" + articleId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processVoidArt(_response);
        });
    }

    protected processVoidArt(response: Response): Promise<ResCodeOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfString;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfString>(null as any);
    }

    /**
     * 是否收藏
     */
    isCollection(articleid: number): Promise<ResCodeOfBoolean> {
        let url_ = this.baseUrl + "/api/CollectionAndLike/collect/{articleid}";
        if (articleid === undefined || articleid === null)
            throw new Error("The parameter 'articleid' must be defined.");
        url_ = url_.replace("{articleid}", encodeURIComponent("" + articleid));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processIsCollection(_response);
        });
    }

    protected processIsCollection(response: Response): Promise<ResCodeOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfBoolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfBoolean>(null as any);
    }

    /**
     * 点赞文章
     */
    addlike(articleId: number): Promise<ResCodeOfString> {
        let url_ = this.baseUrl + "/api/CollectionAndLike/like/{articleId}";
        if (articleId === undefined || articleId === null)
            throw new Error("The parameter 'articleId' must be defined.");
        url_ = url_.replace("{articleId}", encodeURIComponent("" + articleId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddlike(_response);
        });
    }

    protected processAddlike(response: Response): Promise<ResCodeOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfString;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfString>(null as any);
    }

    /**
     * 取消点赞
     */
    voidlike(articleId: number): Promise<ResCodeOfString> {
        let url_ = this.baseUrl + "/api/CollectionAndLike/like/void/{articleId}";
        if (articleId === undefined || articleId === null)
            throw new Error("The parameter 'articleId' must be defined.");
        url_ = url_.replace("{articleId}", encodeURIComponent("" + articleId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processVoidlike(_response);
        });
    }

    protected processVoidlike(response: Response): Promise<ResCodeOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfString;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfString>(null as any);
    }

    /**
     * 是否点赞
     */
    islike(articleid: number): Promise<ResCodeOfBoolean> {
        let url_ = this.baseUrl + "/api/CollectionAndLike/like/{articleid}";
        if (articleid === undefined || articleid === null)
            throw new Error("The parameter 'articleid' must be defined.");
        url_ = url_.replace("{articleid}", encodeURIComponent("" + articleid));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processIslike(_response);
        });
    }

    protected processIslike(response: Response): Promise<ResCodeOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfBoolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfBoolean>(null as any);
    }
}

export class CommentClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5064";
    }

    /**
     * 发表评论
     */
    addComment(comment: CommentDTO): Promise<ResCodeOfBoolean> {
        let url_ = this.baseUrl + "/api/Comment";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(comment);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddComment(_response);
        });
    }

    protected processAddComment(response: Response): Promise<ResCodeOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfBoolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfBoolean>(null as any);
    }

    /**
     * 评论点赞（取消点赞）
     */
    upLike(id: number): Promise<ResCodeOfString> {
        let url_ = this.baseUrl + "/api/Comment/uplick/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PATCH",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpLike(_response);
        });
    }

    protected processUpLike(response: Response): Promise<ResCodeOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfString;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfString>(null as any);
    }

    /**
     * 第一次获取评论（只获取第一层）
     */
    getComment(articleId: number): Promise<ResCodeOfListOfCommentDTO> {
        let url_ = this.baseUrl + "/api/Comment/getcomment/{articleId}";
        if (articleId === undefined || articleId === null)
            throw new Error("The parameter 'articleId' must be defined.");
        url_ = url_.replace("{articleId}", encodeURIComponent("" + articleId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetComment(_response);
        });
    }

    protected processGetComment(response: Response): Promise<ResCodeOfListOfCommentDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfListOfCommentDTO;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfListOfCommentDTO>(null as any);
    }

    /**
     * 获得评论的回复
     * @param id 展开的顶层评论Id
     */
    getResponse(id: number): Promise<ResCodeOfListOfCommentDTO> {
        let url_ = this.baseUrl + "/response/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetResponse(_response);
        });
    }

    protected processGetResponse(response: Response): Promise<ResCodeOfListOfCommentDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfListOfCommentDTO;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfListOfCommentDTO>(null as any);
    }

    /**
     * 获得本人所有文章下未审核的评论
     */
    getUnPass(): Promise<ResCodeOfListOfCommentDTO> {
        let url_ = this.baseUrl + "/api/Comment/UnPass";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUnPass(_response);
        });
    }

    protected processGetUnPass(response: Response): Promise<ResCodeOfListOfCommentDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfListOfCommentDTO;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfListOfCommentDTO>(null as any);
    }

    /**
     * 审核评论
     * @param ispass 是否通过
     */
    passComment(commengId: number, ispass: boolean): Promise<ResCodeOfString> {
        let url_ = this.baseUrl + "/api/Comment/{commengId}/{ispass}";
        if (commengId === undefined || commengId === null)
            throw new Error("The parameter 'commengId' must be defined.");
        url_ = url_.replace("{commengId}", encodeURIComponent("" + commengId));
        if (ispass === undefined || ispass === null)
            throw new Error("The parameter 'ispass' must be defined.");
        url_ = url_.replace("{ispass}", encodeURIComponent("" + ispass));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PATCH",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPassComment(_response);
        });
    }

    protected processPassComment(response: Response): Promise<ResCodeOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfString;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfString>(null as any);
    }

    /**
     * 删除评论
     */
    delect(id: number): Promise<ResCodeOfString> {
        let url_ = this.baseUrl + "/api/Comment/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelect(_response);
        });
    }

    protected processDelect(response: Response): Promise<ResCodeOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfString;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfString>(null as any);
    }
}

export class FriendClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5064";
    }

    /**
     * 关注
     * @param userid 对方id
     */
    addFriend(userid: number): Promise<ResCodeOfBoolean> {
        let url_ = this.baseUrl + "/api/Friend/{userid}";
        if (userid === undefined || userid === null)
            throw new Error("The parameter 'userid' must be defined.");
        url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddFriend(_response);
        });
    }

    protected processAddFriend(response: Response): Promise<ResCodeOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfBoolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfBoolean>(null as any);
    }

    /**
     * 取消关注
     * @param userid 对方id
     */
    deleteFriend(userid: number): Promise<ResCodeOfBoolean> {
        let url_ = this.baseUrl + "/api/Friend/{userid}";
        if (userid === undefined || userid === null)
            throw new Error("The parameter 'userid' must be defined.");
        url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteFriend(_response);
        });
    }

    protected processDeleteFriend(response: Response): Promise<ResCodeOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfBoolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfBoolean>(null as any);
    }

    /**
     * 是否关注此人
     * @param userid 对方Id
     */
    isFollow(userid: number): Promise<ResCodeOfBoolean> {
        let url_ = this.baseUrl + "/api/Friend/{userid}";
        if (userid === undefined || userid === null)
            throw new Error("The parameter 'userid' must be defined.");
        url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processIsFollow(_response);
        });
    }

    protected processIsFollow(response: Response): Promise<ResCodeOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfBoolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfBoolean>(null as any);
    }

    /**
     * 加入黑名单
     * @param id 对方id
     */
    delete(id: number): Promise<ResCodeOfBoolean> {
        let url_ = this.baseUrl + "/api/Friend/add/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PATCH",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<ResCodeOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfBoolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfBoolean>(null as any);
    }

    /**
     * 获取粉丝(数)
     */
    getFans(userid: number, page: number): Promise<ResCodeOfFansDTO> {
        let url_ = this.baseUrl + "/api/Friend/fan/{userid}/{page}";
        if (userid === undefined || userid === null)
            throw new Error("The parameter 'userid' must be defined.");
        url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
        if (page === undefined || page === null)
            throw new Error("The parameter 'page' must be defined.");
        url_ = url_.replace("{page}", encodeURIComponent("" + page));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetFans(_response);
        });
    }

    protected processGetFans(response: Response): Promise<ResCodeOfFansDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfFansDTO;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfFansDTO>(null as any);
    }

    /**
     * 获取关注的人(数)
     */
    getFollow(userid: number, page: number): Promise<ResCodeOfFansDTO> {
        let url_ = this.baseUrl + "/api/Friend/folow/{userid}/{page}";
        if (userid === undefined || userid === null)
            throw new Error("The parameter 'userid' must be defined.");
        url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
        if (page === undefined || page === null)
            throw new Error("The parameter 'page' must be defined.");
        url_ = url_.replace("{page}", encodeURIComponent("" + page));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetFollow(_response);
        });
    }

    protected processGetFollow(response: Response): Promise<ResCodeOfFansDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfFansDTO;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfFansDTO>(null as any);
    }

    /**
     * 获取粉丝数，关注数
     * @param userid (optional) 
     */
    getFanFollowNumber(userid: number | undefined): Promise<ResCodeOfDictionaryOfStringAndInteger> {
        let url_ = this.baseUrl + "/api/Friend?";
        if (userid === null)
            throw new Error("The parameter 'userid' cannot be null.");
        else if (userid !== undefined)
            url_ += "userid=" + encodeURIComponent("" + userid) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetFanFollowNumber(_response);
        });
    }

    protected processGetFanFollowNumber(response: Response): Promise<ResCodeOfDictionaryOfStringAndInteger> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfDictionaryOfStringAndInteger;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfDictionaryOfStringAndInteger>(null as any);
    }
}

export class LoginClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5064";
    }

    /**
     * 登录
     */
    login(info: LoginInfo): Promise<ResCodeOfUserDTO> {
        let url_ = this.baseUrl + "/api/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(info);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<ResCodeOfUserDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfUserDTO;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfUserDTO>(null as any);
    }

    /**
     * 注册
     */
    reg(regInfo: RegInfo): Promise<ResCodeOfBoolean> {
        let url_ = this.baseUrl + "/api/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(regInfo);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReg(_response);
        });
    }

    protected processReg(response: Response): Promise<ResCodeOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfBoolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfBoolean>(null as any);
    }

    /**
     * 注销账号，七天后软删除
     */
    logout(): Promise<ResCodeOfBoolean> {
        let url_ = this.baseUrl + "/api/Login";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogout(_response);
        });
    }

    protected processLogout(response: Response): Promise<ResCodeOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfBoolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfBoolean>(null as any);
    }

    /**
     * 通过Jwt获取用户信息（自动登录时使用）
     */
    getByJwt(): Promise<ResCodeOfUserDTO> {
        let url_ = this.baseUrl + "/api/Login";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetByJwt(_response);
        });
    }

    protected processGetByJwt(response: Response): Promise<ResCodeOfUserDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfUserDTO;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfUserDTO>(null as any);
    }

    /**
     * 测试：获取全部用户
     */
    getDetilUsers(): Promise<ResCodeOfListOfDetilUser> {
        let url_ = this.baseUrl + "/api/Login/getall";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDetilUsers(_response);
        });
    }

    protected processGetDetilUsers(response: Response): Promise<ResCodeOfListOfDetilUser> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfListOfDetilUser;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfListOfDetilUser>(null as any);
    }

    islogin(): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Login/BlackRoom";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processIslogin(_response);
        });
    }

    protected processIslogin(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    admin(): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Login/Admin";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdmin(_response);
        });
    }

    protected processAdmin(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    normal(): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Login/Normal";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processNormal(_response);
        });
    }

    protected processNormal(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * 是否有权访问
     * @param path (optional) 
     */
    isAllow(path: string | null | undefined): Promise<ResCodeOfBoolean> {
        let url_ = this.baseUrl + "/api/Login/path?";
        if (path !== undefined && path !== null)
            url_ += "path=" + encodeURIComponent("" + path) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processIsAllow(_response);
        });
    }

    protected processIsAllow(response: Response): Promise<ResCodeOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfBoolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfBoolean>(null as any);
    }
}

export class PictureClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5064";
    }

    /**
     * 上传头像
     */
    headerfile(): Promise<ResCodeOfString> {
        let url_ = this.baseUrl + "/api/Picture/headfile";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processHeaderfile(_response);
        });
    }

    protected processHeaderfile(response: Response): Promise<ResCodeOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfString;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfString>(null as any);
    }

    /**
     * 上传相册
     */
    collectionfile(): Promise<ResCodeOfListOfString> {
        let url_ = this.baseUrl + "/api/Picture";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCollectionfile(_response);
        });
    }

    protected processCollectionfile(response: Response): Promise<ResCodeOfListOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfListOfString;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfListOfString>(null as any);
    }

    /**
     * 获取头像
     */
    getHeader(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Picture/header";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetHeader(_response);
        });
    }

    protected processGetHeader(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    /**
     * 获取对方头像
     * @param userid 对方id
     */
    getHeadById(userid: number): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Picture/{userid}";
        if (userid === undefined || userid === null)
            throw new Error("The parameter 'userid' must be defined.");
        url_ = url_.replace("{userid}", encodeURIComponent("" + userid));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetHeadById(_response);
        });
    }

    protected processGetHeadById(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    /**
     * 获取相册图片
     * @param id 图片id
     */
    getByPicId(id: number): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Picture/getById/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetByPicId(_response);
        });
    }

    protected processGetByPicId(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    /**
     * 上传博文中的图片
     */
    upLoadArticleImg(formData: FormData): Promise<ResCodeOfString> {
        let url_ = this.baseUrl + "/api/Picture/articleimg";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            },
            body: formData
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpLoadArticleImg(_response);
        });
    }

    protected processUpLoadArticleImg(response: Response): Promise<ResCodeOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfString;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfString>(null as any);
    }

    /**
     * 获取文章中的图片
     */
    getByPicName(picname: string | null): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Picture/GetByPicName/{picname}";
        if (picname === undefined || picname === null)
            throw new Error("The parameter 'picname' must be defined.");
        url_ = url_.replace("{picname}", encodeURIComponent("" + picname));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetByPicName(_response);
        });
    }

    protected processGetByPicName(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export class RoleClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5064";
    }

    get(): Promise<Role[]> {
        let url_ = this.baseUrl + "/api/Role";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<Role[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as Role[];
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<Role[]>(null as any);
    }
}

export class TagsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5064";
    }

    getall(): Promise<TagInfo[]> {
        let url_ = this.baseUrl + "/api/Tags";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetall(_response);
        });
    }

    protected processGetall(response: Response): Promise<TagInfo[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as TagInfo[];
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TagInfo[]>(null as any);
    }

    addTag(tagname: string | null | undefined): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Tags/addtag?";
        if (tagname !== undefined && tagname !== null)
            url_ += "tagname=" + encodeURIComponent("" + tagname) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddTag(_response);
        });
    }

    protected processAddTag(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    addTags(tags: TagInfo[]): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Tags/addtags";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(tags);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddTags(_response);
        });
    }

    protected processAddTags(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    changTag(tag: TagInfo): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Tags/changgetag";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(tag);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChangTag(_response);
        });
    }

    protected processChangTag(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    deleteTag(tagId: number): Promise<boolean> {
        let url_ = this.baseUrl + "/api/Tags/{tagId}";
        if (tagId === undefined || tagId === null)
            throw new Error("The parameter 'tagId' must be defined.");
        url_ = url_.replace("{tagId}", encodeURIComponent("" + tagId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteTag(_response);
        });
    }

    protected processDeleteTag(response: Response): Promise<boolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as boolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<boolean>(null as any);
    }

    /**
     * 模糊查询
     */
    getByName(name: string | null): Promise<ResCodeOfListOfTagDTO> {
        let url_ = this.baseUrl + "/api/Tags/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetByName(_response);
        });
    }

    protected processGetByName(response: Response): Promise<ResCodeOfListOfTagDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfListOfTagDTO;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfListOfTagDTO>(null as any);
    }

    /**
     * 通过标签名模糊查询标签
     */
    searchByName(name: string | null): Promise<ResCodeOfListOfTagInfo> {
        let url_ = this.baseUrl + "/api/Tags/getby/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSearchByName(_response);
        });
    }

    protected processSearchByName(response: Response): Promise<ResCodeOfListOfTagInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfListOfTagInfo;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfListOfTagInfo>(null as any);
    }
}

export class UserClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5064";
    }

    /**
     * 修改个人信息
     */
    upDataUser(able: ChangeUserInfoAble): Promise<ResCodeOfString> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(able);

        let options_: RequestInit = {
            body: content_,
            method: "PATCH",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpDataUser(_response);
        });
    }

    protected processUpDataUser(response: Response): Promise<ResCodeOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfString;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfString>(null as any);
    }

    getUserByJwt(): Promise<ResCodeOfUserDTO> {
        let url_ = this.baseUrl + "/api/User";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserByJwt(_response);
        });
    }

    protected processGetUserByJwt(response: Response): Promise<ResCodeOfUserDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfUserDTO;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfUserDTO>(null as any);
    }

    /**
     * 根据用户ID获取用户非敏感信息(用于评论等信息获取)
     */
    getUserInfoById(id: number): Promise<ResCodeOfUserDTO> {
        let url_ = this.baseUrl + "/api/User/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserInfoById(_response);
        });
    }

    protected processGetUserInfoById(response: Response): Promise<ResCodeOfUserDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfUserDTO;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfUserDTO>(null as any);
    }

    getViewNumberArticle(): Promise<ResCodeOfListOfDictionaryOfStringAndInteger> {
        let url_ = this.baseUrl + "/api/User/order";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetViewNumberArticle(_response);
        });
    }

    protected processGetViewNumberArticle(response: Response): Promise<ResCodeOfListOfDictionaryOfStringAndInteger> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfListOfDictionaryOfStringAndInteger;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfListOfDictionaryOfStringAndInteger>(null as any);
    }

    getArsComms(): Promise<ResCodeOfListOfInteger> {
        let url_ = this.baseUrl + "/api/User/numbers";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetArsComms(_response);
        });
    }

    protected processGetArsComms(response: Response): Promise<ResCodeOfListOfInteger> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfListOfInteger;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfListOfInteger>(null as any);
    }
}

export class UserGroupClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "http://localhost:5064";
    }

    /**
     * 用户添加相册，id通过jwt获取
     * @param groupname 相册名
     */
    addGroup(groupname: string | null): Promise<ResCodeOfBoolean> {
        let url_ = this.baseUrl + "/api/UserGroup/{groupname}";
        if (groupname === undefined || groupname === null)
            throw new Error("The parameter 'groupname' must be defined.");
        url_ = url_.replace("{groupname}", encodeURIComponent("" + groupname));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PUT",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAddGroup(_response);
        });
    }

    protected processAddGroup(response: Response): Promise<ResCodeOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfBoolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfBoolean>(null as any);
    }

    /**
     * 删除相册
     */
    delect(groupid: number): Promise<ResCodeOfBoolean> {
        let url_ = this.baseUrl + "/api/UserGroup/{groupid}";
        if (groupid === undefined || groupid === null)
            throw new Error("The parameter 'groupid' must be defined.");
        url_ = url_.replace("{groupid}", encodeURIComponent("" + groupid));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelect(_response);
        });
    }

    protected processDelect(response: Response): Promise<ResCodeOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfBoolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfBoolean>(null as any);
    }

    /**
     * 修改相册名称
     */
    changegroup(groupid: number, groupname: string | null): Promise<ResCodeOfBoolean> {
        let url_ = this.baseUrl + "/api/UserGroup/{groupid}/{groupname}";
        if (groupid === undefined || groupid === null)
            throw new Error("The parameter 'groupid' must be defined.");
        url_ = url_.replace("{groupid}", encodeURIComponent("" + groupid));
        if (groupname === undefined || groupname === null)
            throw new Error("The parameter 'groupname' must be defined.");
        url_ = url_.replace("{groupname}", encodeURIComponent("" + groupname));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "PATCH",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChangegroup(_response);
        });
    }

    protected processChangegroup(response: Response): Promise<ResCodeOfBoolean> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfBoolean;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfBoolean>(null as any);
    }

    getGroup(): Promise<ResCodeOfListOfUserGroupDTO> {
        let url_ = this.baseUrl + "/api/UserGroup";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetGroup(_response);
        });
    }

    protected processGetGroup(response: Response): Promise<ResCodeOfListOfUserGroupDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfListOfUserGroupDTO;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfListOfUserGroupDTO>(null as any);
    }

    /**
     * 查找相册
     * @param name 相册名
     */
    get(name: string | null): Promise<ResCodeOfListOfUserGroupDTO> {
        let url_ = this.baseUrl + "/api/UserGroup/{name}";
        if (name === undefined || name === null)
            throw new Error("The parameter 'name' must be defined.");
        url_ = url_.replace("{name}", encodeURIComponent("" + name));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                'Authorization': localStorage.getItem('MyBlogJwt') as string,
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGet(_response);
        });
    }

    protected processGet(response: Response): Promise<ResCodeOfListOfUserGroupDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                result200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver) as ResCodeOfListOfUserGroupDTO;
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ResCodeOfListOfUserGroupDTO>(null as any);
    }
}

export interface ResCodeOfPageDataOfArticleDTO {
    code?: number;
    message?: string | undefined;
    data?: PageDataOfArticleDTO | undefined;
}

export interface PageDataOfArticleDTO {
    pageindex?: number;
    pageSize?: number;
    total?: number;
    data?: ArticleDTO[] | undefined;
}

export interface ArticleDTO {
    id?: number;
    userId?: number;
    title?: string;
    detail?: string;
    creatTime?: Date;
    changeTime?: Date | undefined;
    count?: number;
    collection?: number;
    likeNumber?: number;
    status?: number;
    typeNumber?: number;
    isTop?: boolean;
    tags?: TagDTO[] | undefined;
}

export interface TagDTO {
    id?: number;
    tagName?: string;
}

export interface ResCodeOfBoolean {
    code?: number;
    message?: string | undefined;
    data?: boolean;
}

export interface ResCodeOfArticleDTO {
    code?: number;
    message?: string | undefined;
    data: ArticleDTO;
}

export interface ResCodeOfString {
    code?: number;
    message?: string | undefined;
    data?: string | undefined;
}

export interface PageDataOfString {
    pageindex?: number;
    pageSize?: number;
    total?: number;
    data?: string[] | undefined;
}

export interface ResCodeOfPageDataOfChatInfo {
    code?: number;
    message?: string | undefined;
    data?: PageDataOfChatInfo | undefined;
}

export interface PageDataOfChatInfo {
    pageindex?: number;
    pageSize?: number;
    total?: number;
    data?: ChatInfo[] | undefined;
}

export interface ChatInfo {
    id?: number;
    sendId?: number;
    receiveId?: number;
    message?: string;
    receiveStatus?: boolean;
    sendTime?: Date;
    receive?: DetilUser;
    send?: DetilUser;
}

export interface DetilUser {
    id?: number;
    account?: string;
    nickName?: string;
    inyro?: string | undefined;
    password?: string;
    email?: string;
    fans?: number;
    commandChick?: boolean;
    address?: string;
    userImg?: string;
    userCount?: number;
    roleId?: number;
    isDisable?: number;
    sendChatInfos?: ChatInfo[];
    reciveChatInfo?: ChatInfo[];
    articleInfos?: ArticleInfo[];
    commentInfoResponses?: CommentInfo[];
    commentInfoUsers?: CommentInfo[];
    role?: Role;
    userPictures?: UserPicture[];
}

export interface ArticleInfo {
    id?: number;
    userId?: number;
    title?: string;
    detail?: string;
    creatTime?: Date;
    changeTime?: Date | undefined;
    count?: number;
    collection?: number;
    likeNumber?: number;
    status?: number;
    typeNumber?: number;
    isTop?: boolean;
    isDisable?: number;
    commentInfos?: CommentInfo[];
    user?: DetilUser;
    tags?: TagInfo[];
}

export interface CommentInfo {
    commend?: number;
    articleId?: number;
    commentText?: string;
    userId?: number;
    isResponse?: boolean;
    responseId?: number | undefined;
    likeCount?: number | undefined;
    status?: number;
    releaseTime?: Date;
    article?: ArticleInfo;
    response?: DetilUser | undefined;
    user?: DetilUser;
    parent?: CommentInfo | undefined;
    children?: CommentInfo[] | undefined;
}

export interface TagInfo {
    id?: number;
    tagName?: string;
    articleInfos?: ArticleInfo[];
}

export interface Role {
    roleId?: number;
    roleName?: string;
    detilUsers?: DetilUser[];
}

export interface UserPicture {
    groupId?: number;
    userId?: number;
    groupName?: string;
    user?: DetilUser;
    groupPictureList?: GroupPicture[] | undefined;
}

export interface GroupPicture {
    id?: number;
    groupId?: number;
    pictureId?: number;
    group?: UserPicture;
    picture?: Picture;
}

export interface Picture {
    id?: number;
    path?: string | undefined;
}

export interface CommentDTO {
    isLike?: boolean;
    commend?: number;
    articleId?: number;
    userId?: number;
    commentText?: string;
    isResponse?: boolean;
    responseId?: number | undefined;
    likeCount?: number | undefined;
    status?: number;
    releaseTime?: Date;
    parent?: CommentDTO | undefined;
    children?: CommentDTO[] | undefined;
}

export interface ResCodeOfListOfCommentDTO {
    code?: number;
    message?: string | undefined;
    data: CommentDTO[];
}

export interface ResCodeOfFansDTO {
    code?: number;
    message?: string | undefined;
    data?: FansDTO | undefined;
}

export interface FansDTO {
    users?: UserDTO[];
    count?: number;
}

export interface UserDTO {
    id?: number;
    account?: string;
    nickName?: string;
    inyro?: string | undefined;
    fans?: number;
    userImg?: string;
    address?: string;
    email?: string;
    jwt?: string | undefined;
}

export interface ResCodeOfDictionaryOfStringAndInteger {
    code?: number;
    message?: string | undefined;
    data?: { [key: string]: number; } | undefined;
}

export interface ResCodeOfUserDTO {
    code?: number;
    message?: string | undefined;
    data: UserDTO;
}

export interface LoginInfo {
    account?: string;
    password?: string;
}

export interface RegInfo {
    account?: string;
    nickName?: string;
    password?: string;
    email?: string;
    address?: string;
    userImg?: string;
}

export interface ResCodeOfListOfDetilUser {
    code?: number;
    message?: string | undefined;
    data?: (DetilUser | undefined)[] | undefined;
}

export interface ResCodeOfListOfString {
    code?: number;
    message?: string | undefined;
    data?: (string | undefined)[] | undefined;
}

export interface ResCodeOfListOfTagDTO {
    code?: number;
    message?: string | undefined;
    data?: (TagDTO | undefined)[] | undefined;
}

export interface ResCodeOfListOfTagInfo {
    code?: number;
    message?: string | undefined;
    data?: (TagInfo | undefined)[] | undefined;
}

export interface ChangeUserInfoAble {
    nickName?: string;
    inyro?: string | undefined;
    userImg?: string;
    address?: string;
    email?: string;
}

export interface ResCodeOfListOfDictionaryOfStringAndInteger {
    code?: number;
    message?: string | undefined;
    data?: ({ [key: string]: number; } | undefined)[] | undefined;
}

export interface ResCodeOfListOfInteger {
    code?: number;
    message?: string | undefined;
    data: number[];
}

export interface ResCodeOfListOfUserGroupDTO {
    code?: number;
    message?: string | undefined;
    data?: (UserGroupDTO | undefined)[] | undefined;
}

export interface UserGroupDTO {
    groupId?: number;
    groupName?: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}
function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {

    if (result !== null && result !== undefined) {
        throw result;
    }
    else
        throw new ApiException(message, status, response, headers, null);
}